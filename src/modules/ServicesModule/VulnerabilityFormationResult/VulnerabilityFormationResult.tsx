import React, { FC, useEffect, useState } from 'react'

import { Breadcrumbs, ResultTable, ServiceButton } from 'shared/components'
import { downloadXlsxData } from 'shared/utils'
import { api } from 'api'

import { useAppSelector } from 'store'

import { breadcrumbs, headers } from './constants'
import s from './vulnerabilityFormationResult.module.scss'


const VulnerabilityFormationResult: FC = () => {
  const [items, setItems] = useState<string[][] | null>(null)

  const results = useAppSelector(state => state.vulnService.result)


  useEffect(() => {
    if (!results) return
    const parsedItems: string[][] = []
    results.forEach((value) => {
      const cells = [
        value.name || '-',
        value.version || '-',
        value.sfc_type?.name || '-',
        value.vulnerabilities.map(v => v.name).join(', ')
      ]
      parsedItems.push(cells)
    })
    setItems(parsedItems)
  }, [results])

  const downloadHandler = () => {
    const itemsIds = results?.map(item => item.id).join(',')
    api.get<BlobPart>(`/sfc/characteristics/sfc-with-vulnerabilities/file-xlsx/?id__in=${itemsIds ?? ''}`, {
      responseType: 'arraybuffer'
    }).then((result) => {
      downloadXlsxData(result.data)
    }).catch(e => console.log(e))
  }

  return (
    <>
      <Breadcrumbs breadcrumbs={breadcrumbs} />
      <h2 className={s.title}> Сервис формирования перечня уязвимостей - результат</h2>
      {
        items && <div className={s.tableContainer}>
          <ResultTable headers={headers} items={items} />
          <ServiceButton
            buttonTitle={'Сохранить на устройстве'}
            buttonOnClick={downloadHandler}
          />
        </div>
      }

    </>
  )
}

export { VulnerabilityFormationResult }
