import React, { FC, useEffect } from 'react'
import { useParams } from 'react-router-dom'

import { ItemInfoData, ItemParams, ItemTableData } from 'shared/types'
import { Breadcrumbs, BreadcrumbsSkeleton, IBreadcrumb, ItemInfo, TableSkeleton } from 'shared/components'
import { useAppDispatch, useAppSelector } from 'store'
import { axiosGetVulnerability } from 'store/Vulnerabilities/actions'


const VulnerabilityItem: FC = () => {
  const { id } = useParams<ItemParams>()

  const dispatch = useAppDispatch()

  useEffect(() => {
    (async () => {
      await dispatch(axiosGetVulnerability(id as string))
    })().catch(e => console.log(e))
  }, [dispatch, id])

  const { status, current: vulnerability } = useAppSelector(state => state.vulnerabilities)

  const table: ItemTableData[] | null = vulnerability && [
    { id: 1, name: 'Описание', value: vulnerability.description },
    { id: 2, name: 'Класс', value: vulnerability.vul_class || '-' },
    { id: 3, name: 'Степень опасности', value: vulnerability.danger_level?.toString() || '-' },
    {
      id: 4,
      name: 'CWE/CVE',
      value: vulnerability.cwe_cve_links?.map(
        c => {
          return {
            value: `${c.id}-${c.name}`,
            url: c.url
          }
        }
      )
    },
    {
      id: 5,
      name: 'СФХ',
      value: vulnerability.sfc?.map(
        s => {
          return {
            value: `SFC-${s}`,
            url: `/threats-data-base/SFC/${s}`
          }
        })
    },
    { id: 7, name: 'Архетипы', value: vulnerability.archetypes }
  ]

  const data: ItemInfoData | null = vulnerability && {
    id: vulnerability.id,
    name: vulnerability.name,
    type: 'V',
    table,
    sources: [],
    articles: [],
    cvss_vector_2: vulnerability.cvss_vector_2,
    cvss_vector_3: vulnerability.cvss_vector_3
  }

  const breadcrumbs: IBreadcrumb[] | null = vulnerability && [
    {
      name: 'База данных угроз',
      link: '/threats-data-base'
    },
    {
      name: 'Уязвимости',
      link: '/threats-data-base/vulnerabilities'
    },
    {
      name: vulnerability.name,
      link: `/threats-data-base/vulnerabilities/${vulnerability.id}`
    }
  ]

  return (
    <>
      {status !== 'resolved' && <BreadcrumbsSkeleton/>}
      {status !== 'resolved' && <TableSkeleton/>}

      {breadcrumbs && status === 'resolved' && <Breadcrumbs breadcrumbs={breadcrumbs} />}
      {data && status === 'resolved' && <ItemInfo data={data}/> }
    </>
  )
}

export { VulnerabilityItem }
